- @page_title = "About the Technology"
#static-wrap
  %h1= @page_title
  %p= "#{t :app} relies on a number of open source software libraries to help implement various features you see on the site. The three software components used most extensively throughout #{t :app} code are <a href='http://rubyonrails.org/'>Ruby on Rails</a>, <a href='http://jquery.com'>jQuery</a>, and <a href='http://documentcloud.github.com/backbone/'>Backbone.js</a>. These three components help structure code in a maintainable way, and implement several useful design patterns that allow #{t :app} to more easily respond to user interactions.".html_safe()
  %h2 Ruby on Rails 
  %p= "<a href='http://rubyonrails.org/'>Ruby on Rails</a> is a web framework favoring \"convention over configuration,\" and is programmed in the <a href='http://www.ruby-lang.org/'>Ruby</a> programming language. Rails has a large and thriving community with a number of open source libraries. Rails was a good choice for #{t :app} because it made it very easy to get a basic website up and running. Rails is also well tested and scalable, as demonstrated by the many popular websites that use it.".html_safe()
  %p Rails implements the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model View Controller</a> design pattern to help organize the code in a maintainable way. Models are used to represent and query data. Views render the data in a user-readable form that is shown by the web browser. Controllers connect the Models and Views by taking user input, telling the appropriate Model(s) to fetch the data, and sending that data to the appropriate View.
  %p= "Rails also uses the <a href='http://en.wikipedia.org/wiki/Active_record_pattern'>active record pattern</a> to implement <a href='http://en.wikipedia.org/wiki/Object-relational_mapping'>object-relational mapping</a>. #{t :app} uses the PostgreSQL database to store information on pictures, and ActiveRecord in Rails provides an easy way to interact with this database. With ActiveRecord, you can easily insert, query, update, and delete data without having to write verbose SQL. Using ActiveRecord in Rails also helps protect against <a href='http://en.wikipedia.org/wiki/SQL_injection'>SQL injection</a> attacks.".html_safe()
  %h2 Backbone.js
  %p= "<a href='http://backbonejs.org/'>Backbone.js</a> is a client-side <a href='http://en.wikipedia.org/wiki/JavaScript'>JavaScript</a> library that provides structure to JavaScript-heavy applications. #{t :app} is primarily a client-side application, only making calls to the Ruby on Rails backend with necessary, so Backbone was a clear choice for implementing the client-side functionality.".html_safe()
  %p Backbone code is organized in four components: Models, Views, Collections, and Routes. Models are used to interact with data retrieved from the server, while Collections hold a list of Models. Views present the data to the user, and can respond to user-interface events. Views can be associated with a collection of models or a single model, and can be set up to automatically update whenever that collection or model changes. The Router watches for changes in the URL and renders the appropriate View when the URL changes. The structure provided through these four components helps to reduce the amount of data transferred between the client and server, thus making responses to user interaction quicker.
  %p Backbone also has a built in history module that supports pushState. This allows for Backbone to change the URL without refreshing the whole page. Furthermore, this new URL is pushed into the browser history, so the browser back button still works as expected. For browsers that don't yet support pushState, Backbone falls back on using JavaScript's <i>window.location.hash</i> property.
  %h2 jQuery
  %p= "<a href='http://jquery.com/'>jQuery</a> is a JavaScript library for <a href='http://en.wikipedia.org/wiki/Document_Object_Model'>DOM</a> traversal, manipulation, and event handling. jQuery is used extensively by #{t :app} to help provide consistent cross-browser functionality across many features. jQuery also helps respond to advanced events that are not supported by Backbone such as dragging. jQuery implements <a href='http://addyosmani.com/resources/essentialjsdesignpatterns/book/'>a number of design patterns</a> to make DOM traversal and manipulation easier to deal with. jQuery is also easily extendable and has a number of useful plugins, such as the <a href='http://bgrins.github.com/spectrum/'>Spectrum</a>, <a href='http://harvesthq.github.com/chosen/'>Chosen</a>, and <a href='https://github.com/jeresig/jquery.hotkeys'>jQuery Hotkeys</a> plugins that are used by #{t :app}.".html_safe()
  %h2 Fabric.js
  %p.last= "<a href='http://fabricjs.com/'>Fabric.js</a> is a JavaScript library that provides an \"interactive object model\" on top of the HTML5 <a href='http://en.wikipedia.org/wiki/Canvas_element'>canvas element</a>. #{t :app} uses Fabric.js to help process image modifications and handle user events on the canvas element. Fabric.js features a very useful set of functions for resizing, rotating, and moving objects around on the canvas, as well as functions for modifying object properties such as color and transparency. Fabric.js objects include text, <a href='http://en.wikipedia.org/wiki/Scalable_Vector_Graphics'>Scalable Vector Graphics</a>, basic shapes, and images.".html_safe()
  %hr
  %h2 Architecture Walkthrough
  %p= "When a user first visits #{t :app}, the <a href='http://code.macournoyer.com/thin/'>Thin</a> web server responds to the user's request and uses the Rails routes file to determine which controller should respond to the request. The controller then executes code, which could involve anything from simply rendering a view to more complex code that uses the Rails models to query the database. When the HTML view is prepared, it is sent as a response to the user's browser. The user's browser will render the HTML and send any secondary requests for files embedded in the HTML file, such as CSS, JavaScript, and image files.".html_safe()
  %p= "When the JavaScript finishes loading, all Backbone components are enabled and the Facebook JavaScript SDK starts loading asynchronously. Meanwhile, the Backbone router will render any appropriate Backbone views associated with the current URL. If the Facebook SDK hasn't finished loading yet and the Backbone views need data from Facebook, the router will specify a callback function to be called once the Facebook SDK is loaded. If the user is logged into Facebook and has already given #{t :app} permission to access photos from Facebook, #{t :app} will retrieve information on friends and photos using <a href='https://developers.facebook.com/docs/reference/fql/'>FQL</a>. This data is placed into a Backbone model, which is then added to a collection. The Backbone view associated with this collection will re-render itself every time a new model is added.".html_safe()
  %p= "Once the user selects a photo, the full photo will be loaded onto the photo modification page. Since the photo must abide by <a href='http://en.wikipedia.org/wiki/Same_origin_policy'>same-origin policy</a>, it is loaded through a simple local image proxy that streams the image through #{t :app}'s server. #{t :app} loads this proxied image onto Fabric.js as a Fabric image object and scales it down to fit within dimensions of the page. The sidebar \"toolbox\" is also loaded to enable users to select photo modification tools and configure tools.".html_safe()
  %p Text uses the built in Fabric.js text object for manipulating text and <a href='https://github.com/sorccu/cufon'>Cufon</a> for loading an SVG version of the font. Drawing listens for mouse events on the Fabric.js canvas and draws whenever the user clicks down on the canvas. Image effects use CamanJS and glfx.js to modify the Fabric.js canvas. This is accomplished by converting the Fabric.js canvas to an image, having CamanJS or glfx.js modify this image, and placing this modified image on the Fabric.js canvas.
  %p Certain changes made on the photo manipulation page will trigger a call to save the current state of the image, enabling undoing and redoing. For example, when the user clicks down to draw and then clicks up, the state of the image will only be saved when the click up event is triggered. Image state is saved in <a href='http://en.wikipedia.org/wiki/JSON'>JSON</a> format which can easily be exported from and imported back into Fabric.js.
  %p.last When the user is finished editing the photo, the photo metadata is saved as a record in the database, and the finalized photo is uploaded to Amazon S3. The permalink for the photo is a unique incrementing <a href='http://en.wikipedia.org/wiki/Base64'>base64</a> hash, or in the case of a private photo, it is a longer random base64 hash.
  %hr
  %h2 Open Source Contributions
  %p.last <a href="https://github.com/6/mousefu">mousefu</a>, a jQuery plugin for handling mouse and touch events/coordinates.
  %hr
  %p.last= "A full list of software components and external services used by #{t :app} are listed below:"
  %h2 Server-side
  %ul
    %li
      %a{:href => "http://www.ruby-lang.org/"} Ruby
      and
      %a{:href => "http://rubyonrails.org/"} Ruby on Rails
      for models, routes, controllers, and other server-side logic
    %li
      %a{:href => "http://www.postgresql.org"} PostgreSQL
      for storing data
    %li
      %a{:href => "http://haml-lang.com/"} HAML
      ,
      %a{:href => "http://sass-lang.com/"} SCSS
      \/
      %a{:href => "http://lesscss.org/"} LESS
      , and
      %a{:href => "http://coffeescript.org/"} CoffeeScript
      , which compile into HTML, CSS, and JavaScript
    %li
      %a{:href => "https://github.com/netzpirat/haml_coffee_assets"} Haml Coffee Assets
      for bringing HAML to client-side templates through
      %a{:href => "https://github.com/sstephenson/sprockets"} Sprockets
    %li
      %a{:href => "https://github.com/thoughtbot/paperclip"} Paperclip
      for uploading images to Amazon S3
  %h2 Client-side
  %ul
    %li
      %a{:href => "http://jquery.com/"} jQuery
      for DOM manipulation and basic event handling
    %li
      %a{:href => "http://backbonejs.org/"} Backbone.js
      for pushState and providing MVC-like structure for JavaScript
    %li
      %a{:href => "http://fabricjs.com/"} Fabric.js
      for scaling, rotation, and moving on the &lt;canvas&gt; element
    %li
      %a{:href => "http://camanjs.com/"} CamanJS
      for basic image filters and effects
    %li
      %a{:href => "http://evanw.github.com/glfx.js/"} glfx.js
      for more advanced image filters and effects with WebGL
    %li
      %a{:href => "http://twitter.github.com/bootstrap/"} Bootstrap
      for the CSS grid and some styling
    %li
      %a{:href => "http://jqueryui.com/"} jQuery UI
      for sliders used on the image manipulation page
    %li
      %a{:href => "http://bgrins.github.com/spectrum/"} Spectrum
      for the color picker
    %li
      %a{:href => "http://harvesthq.github.com/chosen/"} Chosen
      for user-friendly select boxes
    %li
      %a{:href => "https://github.com/jeresig/jquery.hotkeys"} jQuery Hotkeys
      to enable keyboard shortcuts
    %li
      %a{:href => "https://github.com/6/mousefu"} mousefu
      for handling mouse coordinates and events on image manipulation canvas
  %h2 External services
  %ul
    %li
      %a{:href => "http://www.heroku.com/"} Heroku
      for Ruby on Rails hosting
    %li
      %a{:href => "http://aws.amazon.com/s3/"} Amazon S3
      for image hosting
    %li
      %a{:href => "http://developers.facebook.com/"} Facebook API
      for importing Facebook photos
    %li
      %a{:href => "http://newrelic.com/"} New Relic
      for performance diagnostics
    %li
      %a{:href => "http://www.google.com/analytics/"} Google Analytics
      for visitor statistics
  
    
